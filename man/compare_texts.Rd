% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_texts.R
\name{compare_texts}
\alias{compare_texts}
\title{Compare Two Blocks of Text}
\usage{
compare_texts(text1, text2)
}
\arguments{
\item{text1}{The first text block to compare.}

\item{text2}{The second text block to compare.}
}
\value{
A numeric value representing the similarity between the two text blocks.
}
\description{
This function compares two blocks of text (e.g., abstracts) using multiple similarity measures.
It supports Jaccard Similarity, Cosine Similarity, Levenshtein Distance, and Longest Common Subsequence.
The function returns a similarity score based on the chosen method.
}
\details{
A function to compare two blocks of text using various similarity measures.
It calculates similarity based on Jaccard, Cosine Similarity, Levenshtein Distance, and Longest Common Subsequence.
\subsection{Similarity Measures}{

The function compares two blocks of text using several different similarity measures. Below are descriptions of the most commonly used measures and how they work:
\subsection{1. Jaccard Similarity}{

\strong{Definition}:
Jaccard similarity measures the proportion of shared words between two texts, ignoring word order. It is calculated as:

J(A, B) = |A ∩ B| / |A ∪ B|

where:
\itemize{
\item A and B are the sets of unique words in each text.
\item |A ∩ B| is the number of words common to both texts.
\item |A ∪ B| is the total number of unique words across both texts.
}

\strong{Interpretation}:
\itemize{
\item Values range from \strong{0} (no words in common) to \strong{1} (identical texts).
\item Higher values indicate more word overlap, but this measure does not account for word frequency or order.
}
}

\subsection{2. Cosine Similarity}{

\strong{Definition}:
Cosine similarity is a vector-based approach that measures how similar two texts are based on word frequency. The texts are represented as \strong{word frequency vectors}, and similarity is computed as the cosine of the angle between these vectors:

cos(θ) = (A . B) / ||A|| ||B||

where:
\itemize{
\item A and B are word frequency vectors.
\item . is the dot product.
\item ||A|| and ||B|| are the vector magnitudes (lengths).
}

\strong{Interpretation}:
\itemize{
\item Ranges from \strong{0} (completely different) to \strong{1} (identical).
\item Takes word frequency into account, so if a word appears multiple times in both texts, the similarity score is higher.
\item Ignores word order.
}
}

\subsection{3. Levenshtein Distance (Edit Distance)}{

\strong{Definition}:
Levenshtein distance (edit distance) measures the number of \strong{single-character edits} (insertions, deletions, substitutions) required to transform one text into another.

\strong{Interpretation}:
\itemize{
\item A lower value means the texts are more similar.
\item A score of \strong{0} means the texts are identical.
\item Unlike Jaccard or Cosine similarity, this method is \strong{sensitive to word order and spelling differences}.
}
}

\subsection{4. Longest Common Subsequence (LCS)}{

\strong{Definition}:
LCS measures the longest sequence of characters (not necessarily consecutive) that appears in both texts in the same order.

\strong{Interpretation}:
\itemize{
\item Higher values indicate more similarity.
\item Unlike Levenshtein, LCS \strong{does not count insertions/deletions that do not break the order} of characters.
\item Good for detecting \strong{similar sentence structures}.
}
}

\subsection{Choosing the Right Measure}{\tabular{lll}{
   Measure \tab What It Captures \tab Best Use Case \cr
   \strong{Jaccard Similarity} \tab Word overlap, ignores order \tab Deduplication, quick filtering \cr
   \strong{Cosine Similarity} \tab Word frequency, ignores order \tab Finding similar abstracts, topic comparison \cr
   \strong{Levenshtein Distance} \tab Spelling differences, order-sensitive \tab Checking near-duplicate sentences, typos \cr
   \strong{LCS Distance} \tab Common phrases, order-sensitive \tab Sentence structure comparison \cr
}


For \strong{deduplication}, a combination of \strong{Jaccard + Cosine Similarity} works well.
For cases where \strong{word order matters}, use \strong{Levenshtein or LCS}.
}

}
}
\examples{
compare_texts("This is a test", "This is a test")
compare_texts("This is a test", "This is a different test")

}
